---
import EnableNotificationToggle from "@/components/EnableNotificationToggle.astro";
import Files from "@/components/Files.astro";
import FolderList from "@/components/FolderList.astro";
import NewFolderButton from "@/components/NewFolderButton.astro";
import SignIn from "@/components/SignIn/index.astro";
import Layout from "@/layouts/Layout.astro";
import { folderService } from "@/services";
import { getUser, isAuthenticated } from "@/utils/auth";

let folders = null;
let user = null;

const userIsAuthenticated = isAuthenticated(Astro.cookies);

if (userIsAuthenticated) {
  user = getUser(Astro.cookies);

  if (user) {
    folders = await folderService.getFolders(user.id);
  }
}
---

<script>
  import { Watcher } from "@/scripts/Watcher";
  import { registerMenuEventListeners } from "@/scripts/registerMenuEventListeners";

  const mutationCallback = (mutation: MutationRecord) => {
    const mutationTarget = mutation.target as HTMLElement | null;

    const folderDeleted =
      mutationTarget?.id === "folder-list-wrapper" &&
      mutation.removedNodes.length > 0;
    const newFolderAdded =
      mutationTarget?.id === "folder-list" &&
      mutation.addedNodes.length > 0 &&
      // @ts-ignore
      mutation.addedNodes[0].classList?.contains("folder-row");

    if (newFolderAdded) {
      const addedNode = mutation.addedNodes[0] as HTMLElement;
      const id = addedNode.id.replace("folder-", "").replace("-row", "");
      registerRowEventListeners(id);
    }

    if (folderDeleted) {
      registerAllEventListeners();
    }
  };

  const registerRowEventListeners = (id: string) => {
    const toggleButton = document.getElementById(
      `toggle-button-folder-${id}-menu`,
    );
    const list = document.getElementById(`list-folder-${id}-menu`);

    if (!toggleButton || !list) {
      console.error("toggleButton or list not found", {
        toggleButton,
        list,
      });
      return;
    }

    registerMenuEventListeners(toggleButton, list);
  };

  const registerAllEventListeners = () => {
    const toggleButtons = document.querySelectorAll(
      '[id^="toggle-button-folder-"]',
    );

    const toggleButtonIds = Array.from(toggleButtons).map(
      (toggleButton) => toggleButton.id,
    );

    toggleButtonIds.forEach((toggleButtonId) => {
      const listId = toggleButtonId.replace("toggle-button", "list");

      const toggleButton = document.getElementById(toggleButtonId);
      const list = document.getElementById(listId);

      if (!toggleButton || !list) {
        console.error("toggleButton or list not found", {
          toggleButtonId,
          listId,
        });
        return;
      }

      registerMenuEventListeners(toggleButton, list);
    });
  };

  const folderListWrapper = document.getElementById("folder-list-wrapper");

  if (!folderListWrapper) {
    throw new Error("folder-list-wrapper not found");
  }

  const folderWatcher = new Watcher(mutationCallback);
  folderWatcher.startWatching(folderListWrapper);
</script>

<Layout title="Home | PingMe">
  {!userIsAuthenticated && <SignIn />}

  {
    userIsAuthenticated && user && (
      <div style="display: flex; justify-content: center; margin-bottom: 2rem">
        <EnableNotificationToggle userId={user.id} />
      </div>
    )
  }

  {
    userIsAuthenticated && folders && (
      <section style="container-type: inline-size;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <div style="display: flex; align-items: center;">
            <span style="font-size: xx-large; margin-right: 1rem">ðŸ“‚</span>
            <h2>Folders</h2>
          </div>
          <NewFolderButton />
        </div>

        <div id="folder-list-wrapper">
          <FolderList folders={folders} />
        </div>
      </section>
    )
  }

  {
    user?.id && userIsAuthenticated && (
      <section style="margin-bottom: 3rem;">
        <Files userId={user.id} />
      </section>
    )
  }
</Layout>

<style>
  main {
    padding: 1.5rem;
  }

  section {
    background-color: var(--section-background);
    border-radius: 0.5rem;
    padding: 1.5rem;
    padding-top: 0.5rem;
    margin-bottom: 1.5rem;
    box-shadow: var(--shadow);
  }

  section h2 {
    color: var(--black);
  }

  li {
    margin-bottom: 1rem;
  }
</style>
