---
import FileList from "@/components/FileList.astro";
import Layout from "@/layouts/Layout.astro";
import { folderService } from "@/services";
import type { File, Folder } from "@/services/types";
import { getUser } from "@/utils/auth";

const { folderId } = Astro.params;

const folderIdNum = Number(folderId);

const user = getUser(Astro.cookies);

if (!user) {
  console.error("User not found");
  return Astro.redirect("/");
}

let folder: Folder | null = null;
let files: File[] | null = [];

if (!folderIdNum || Number.isNaN(folderIdNum)) {
  console.error("Invalid folder ID");
  return Astro.redirect("/");
}

const data = await Promise.all([
  folderService.getFolder(folderIdNum, user.id),
  folderService.getFiles(folderIdNum, user.id),
]);

folder = data[0];
files = data[1];

const fileCount = files?.length ? `(${files.length})` : "";
---

<script>
  import { registerMenuEventListeners } from "@/scripts/registerMenuEventListeners";

  document.addEventListener("DOMContentLoaded", () => {
    const toggleButton = document.getElementById("folder-add-menu");
    const list = document.getElementById("folder-add-menu-id");

    if (!toggleButton) {
      throw new Error("Could not find toggle button with id: folder-add-menu");
    }
    if (!list) {
      throw new Error("Could not find list with id: folder-add-menu-id");
    }

    registerMenuEventListeners(toggleButton, list);
  });
</script>

<Layout title="Folder | PingMe">
  {!folder && <h2>Folder not found</h2>}

  {
    folder && (
      <div class="folder-page">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem;">
          <h2 style="margin-right: 2rem;">{folder.name}</h2>
          <div>
            <button
              class="notification-preference-button"
              hx-get={`/folder/${folderId}/notification-modal`}
              hx-target="#modal-container"
              hx-swap="innerHTML"
              title="Notification preferences"
              aria-label="Notification preferences"
            >
              <span>üõéÔ∏è</span>
            </button>
          </div>
        </div>

        <section>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <div style="display: flex; align-items: center;">
              <span style="font-size: xx-large; margin-right: 1rem">üìù</span>
              <h3>
                Files <span class="file-count">{fileCount}</span>
              </h3>
            </div>

            <div style="padding-top: 2rem">
              <button id="folder-add-menu" class="toggle-button">
                <span>‚ûï</span>
              </button>

              <ul id="folder-add-menu-id" class="list">
                <li>
                  <a href={`/folder/${folderId}/file/new`}>Add file</a>
                </li>
                <hr />
                <li>
                  <button
                    class="add-files-button"
                    hx-get={`/folder/${folderId}/move/files`}
                    hx-target="#modal"
                    hx-swap="innerHTML"
                    title="Add files"
                    aria-label="Add files"
                  >
                    Copy files
                  </button>
                </li>
              </ul>
            </div>
          </div>
          <div id="modal" />

          {!!files?.length && files.length > 2 && (
            <div class="random-file-container">
              <button
                class="primary-button"
                hx-get={`/folder/${folder?.id}/file/random`}
                hx-target="#random-file-name"
                hx-swap="innerHTML"
              >
                Get random file
              </button>

              <div id="random-file-name" />
            </div>
          )}

          {!!files?.length && <FileList files={files} folderId={folder?.id} />}
        </section>
      </div>
    )
  }
</Layout>

<style>
  section {
    background-color: var(--section-background);
    border-radius: 0.5rem;
    padding: 1.5rem;
    padding-top: 0.5rem;
    margin-bottom: 1.5rem;
    box-shadow: var(--shadow);
  }

  hr {
    margin: 0;
  }

  .toggle-button {
    background-color: transparent;
    border: none;
    color: var(--text);
    font-size: 1.5rem;
  }

  .toggle-button span {
    position: relative;
    top: -12px;
    font-size: 2rem;
  }

  .list {
    display: none;
  }

  .list.open {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: var(--background);
    list-style: none;
    position: absolute;
    margin-left: -5rem;
    margin-top: 0;
    margin-bottom: 0;
    z-index: 1;
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    padding: 0;
  }

  .list.open button {
    width: 100%;
    padding: 0.5rem;
    margin: 0;
    background-color: transparent;
    border: none;
    color: var(--text);
    font: inherit;
  }

  .list.open a {
    display: block;
    padding: 0.5rem;
    margin: 0 auto;
    text-decoration: none;
    color: var(--text);
    font-size: inherit;
    text-align: center;
  }

  .list.open li {
    width: 100%;
    min-width: 125px;
    border-radius: 0.5rem;
  }

  .list.open li:hover,
  .list.open li:focus-within {
    background-color: var(--section-background);
  }

  .random-file-container {
    display: flex;
    align-items: center;
    margin: 1.5rem 0;
  }

  #random-file-name {
    margin-left: 1rem;
  }

  .random-file-container button {
    min-width: fit-content;
  }

  h2,
  h3 {
    color: var(--black);
  }

  .folder-page {
    margin: 0 auto;
    max-width: 700px;
    padding: 1rem;
    padding-top: 0;
  }

  .notification-preference-button {
    background: none;
    color: inherit;
    border: none;
    padding: 0;
    font: inherit;
  }

  .notification-preference-button span {
    font-size: 2rem;
  }

  .file-count {
    font-size: 16px;
    color: var(--gray);
    vertical-align: super;
  }

  /* Mobile */
  @media (max-width: 37.5em) {
    .random-file-container {
      flex-direction: column;
      justify-content: space-between;
    }

    .random-file-container button {
      margin-bottom: 1rem;
    }

    #random-file-name {
      margin-left: 0;
    }
  }
</style>
