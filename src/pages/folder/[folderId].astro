---
import FileList from "@/components/FileList.astro";
import NotificationPreferenceForm from "@/components/NotificationPreferenceForm.astro";
import Layout from "@/layouts/Layout.astro";
import { folderService } from "@/services";
import type { File, Folder } from "@/services/types";
import { getUser } from "@/utils/auth";

const { folderId } = Astro.params;

const folderIdNum = Number(folderId);

const user = getUser(Astro.cookies);

if (!user) {
  console.error("User not found");
  return Astro.redirect("/");
}

let folder: Folder | null = null;
let files: File[] | null = [];

if (!folderIdNum || Number.isNaN(folderIdNum)) {
  console.error("Invalid folder ID");
  return Astro.redirect("/");
}

const data = await Promise.all([
  folderService.getFolder(folderIdNum, user.id),
  folderService.getFiles(folderIdNum, user.id),
]);

folder = data[0];
files = data[1];

const notificationPreference = await folderService.getNotificationPreference(
  folderIdNum,
  user.id,
);
---

<Layout title="Folder | PingMe">
  {!folder && <h2>Folder not found</h2>}

  {
    folder && (
      <>
        <h2>{folder.name}</h2>

        <h3>Settings</h3>

        <NotificationPreferenceForm
          folder={folder}
          notificationPreference={notificationPreference}
        />

        {!!files?.length && (
          <div
            style={{ display: "flex", alignItems: "center", marginTop: "1rem" }}
          >
            <button
              hx-get={`/folder/${folder?.id}/file/random`}
              hx-target="#random-file-name"
              hx-swap="innerHTML"
            >
              Get random file
            </button>

            <div id="random-file-name" style="margin-left: 1rem;" />
          </div>
        )}

        <section>
          <h3>Files</h3>

          {!!files?.length && <FileList files={files} folderId={folder?.id} />}
        </section>
      </>
    )
  }
</Layout>

<style>
  h2,
  h3 {
    color: var(--black);
  }
</style>
