---
import { getUser, isAuthenticated } from "@/utils/auth";
import { folderService } from "@/services";
import type { FolderNotificationPreference } from "@/services/types";

const isValidNotificationPreference = (
  pref: string,
): pref is FolderNotificationPreference =>
  ["daily", "weekly", "never"].includes(pref.toString());

const cookies = Astro.cookies;
const params = Astro.params;

if (!isAuthenticated(cookies)) {
  return new Response(null, {
    status: 400,
    statusText: "Invalid Authorization header.",
  });
}

const user = getUser(cookies);

if (!user) {
  return new Response(JSON.stringify({ error: "User not found." }), {
    status: 404,
  });
}

const folderId = params.folderId;

if (!folderId || isNaN(Number(folderId))) {
  return new Response(JSON.stringify({ error: "Folder ID is required" }), {
    status: 400,
  });
}

const body = await Astro.request.formData();

const notificationPreferenceFormData = body.get("notificationPreference");

if (!notificationPreferenceFormData) {
  return new Response(
    JSON.stringify({ error: "Notification preference is required" }),
    { status: 400 },
  );
}

const notificationPreference = notificationPreferenceFormData.toString();

if (!isValidNotificationPreference(notificationPreference)) {
  console.log(`Invalid notification preference: ${notificationPreference}`);

  return new Response(
    JSON.stringify({ error: "Invalid notification preference" }),
    { status: 400 },
  );
}

const result = folderService.setNotificationPreference(
  user.id,
  Number(folderId),
  notificationPreference,
);

if (!result) {
  return new Response(
    JSON.stringify({ error: "Error updating notification preference" }),
    { status: 500 },
  );
}
---

<p>Notification preference updated</p>
