---
import { getUser, isAuthenticated } from "@/utils/auth";
import { folderService } from "@/services";

const cookies = Astro.cookies;
const params = Astro.params;

if (!isAuthenticated(cookies)) {
  return new Response(null, {
    status: 400,
    statusText: "Invalid Authorization header.",
  });
}

const user = getUser(cookies);

if (!user) {
  return new Response(JSON.stringify({ error: "User not found." }), {
    status: 404,
  });
}

const folderId = params.folderId;

if (!folderId || isNaN(Number(folderId))) {
  return new Response(JSON.stringify({ error: "Folder ID is required" }), {
    status: 400,
  });
}

const body = await Astro.request.formData();

const localDateFormData = body.get("localDate");
const repeatFormData = body.getAll("repeat");

if (!localDateFormData) {
  return new Response(
    JSON.stringify({ error: "Notification preference is required" }),
    { status: 400 },
  );
}

function getUtcDate(localDate: string) {
  const date = new Date(localDate);
  const timeZoneOffset = date.getTimezoneOffset();

  const utcDate = new Date(
    Date.UTC(
      date.getFullYear(),
      date.getMonth(),
      date.getDate(),
      date.getHours(),
      date.getMinutes() + timeZoneOffset,
      date.getSeconds(),
    ),
  );

  return utcDate;
}

const localDate = localDateFormData.toString();
const utcDate = getUtcDate(localDate);

const notificationPreference = {
  date: utcDate.toISOString().slice(0, 10),
  time: utcDate.toISOString().slice(11, 16),
  repeat: {
    sunday: repeatFormData.includes("sunday"),
    monday: repeatFormData.includes("monday"),
    tuesday: repeatFormData.includes("tuesday"),
    wednesday: repeatFormData.includes("wednesday"),
    thursday: repeatFormData.includes("thursday"),
    friday: repeatFormData.includes("friday"),
    saturday: repeatFormData.includes("saturday"),
  },
};

const result = await folderService.setNotificationPreference(
  user.id,
  Number(folderId),
  notificationPreference,
);
---

<!-- TODO: support closing notification -->
{result && <p style="text-align: center;">Notification preference updated</p>}
{!result && <p style="text-align: center;">Error updating notification preference</p>}
