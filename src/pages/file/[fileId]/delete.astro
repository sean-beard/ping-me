---
import { fileService } from "@/services";
import { getUser } from "@/utils/auth";

export const partial = true;

const user = getUser(Astro.cookies);

if (!user) {
  return new Response(null, {
    status: 400,
    statusText: "Invalid Authorization header.",
  });
}

const fileId = Astro.params.fileId;

if (!fileId || isNaN(Number(fileId))) {
  return new Response(JSON.stringify({ error: "File ID is required" }), {
    status: 400,
  });
}

const deletedFileId = await fileService.deleteFile(Number(fileId), user.id);

if (!deletedFileId) {
  return new Response(
    JSON.stringify({ error: "Error deleting file with ID: " + fileId }),
    { status: 500 },
  );
}

const shouldRedirect = Astro.request.headers
  .get("hx-current-url")
  ?.includes("file");

if (shouldRedirect) {
  const response = new Response(null, { status: 300 });

  response.headers.set("HX-Redirect", "/");

  return response;
}

let fileCount = null;

try {
  const files = await fileService.getFiles(user.id);

  fileCount = files?.length ? `(${files.length})` : "";
} catch {
  console.error({
    message: "Error getting files to hydrate file count.",
    userId: user.id,
  });
}
---

{
  fileCount !== null && (
    <div hx-swap-oob="innerHTML:.file-count">{fileCount}</div>
  )
}

<></>
