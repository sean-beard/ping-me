---
interface Props {
  username?: string;
  error?: string;
}

const { username, error }: Props = Astro.props;
---

<script>
  const showLoading = () => {
    const submitButtonText = document.querySelector<HTMLSpanElement>("#text");

    if (submitButtonText) {
      submitButtonText.style.display = "none";
    }

    const loader = document.querySelector<HTMLDivElement>("#loader");

    if (loader) {
      loader.style.display = "inline-block";
    }
  };

  const form = document.querySelector("form");

  if (form) {
    form.addEventListener("htmx:beforeOnLoad", () => {
      showLoading();
    });

    document.addEventListener("htmx:sendError", () => {
      const errorElement =
        document.querySelector<HTMLParagraphElement>(".error");

      if (errorElement) {
        errorElement.innerHTML = "API is unavailable";
        errorElement.style.display = "block";
      }
    });
  }
</script>

<p class="error" style={error ? "display: block;" : "display: none;"}>
  {error}
</p>

<form hx-post="/sign-in" hx-target="this" hx-swap="outerHTML" method="POST">
  <label for="username">Username</label>
  <input
    type="text"
    name="username"
    id="username"
    required
    aria-required
    value={username}
  />

  <label for="password">Password</label>
  <input type="password" name="password" id="password" required aria-required />

  <button type="submit">
    <div id="loader" style="display: none;">
      <i class="loading-spinner"></i>
      <i class="loading-spinner"></i>
      <i class="loading-spinner"></i>
    </div>

    <span id="text">Sign in</span>
  </button>

  <style>
    label {
      display: block;
      margin-bottom: 0.5rem;
    }

    input {
      display: block;
      width: 100%;
      padding: 0.5rem;
      border: 1px solid var(--black);
      border-radius: 0.5rem;
      margin-bottom: 1rem;
    }

    button {
      display: block;
      width: 100%;
      padding: 0.5rem;
      border: 1px solid var(--black);
      border-radius: 0.5rem;
      margin-bottom: 1rem;
      background-color: var(--black);
      color: white;
    }

    .error {
      color: maroon;
      font-size: 0.9rem;
      margin: 0.25rem 0;
    }

    .loading-spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-left: 4px solid var(--yellow);
      background-color: var(--orange);
      border-radius: 50%;
      width: 12px;
      height: 12px;
      animation: spin 1s linear infinite;
      display: inline-block;
    }

    .loading-spinner + .loading-spinner {
      margin-left: 0.5rem;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  </style>
</form>
