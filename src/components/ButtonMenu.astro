---
interface MenuItem {
  label: string;
  url: string;
  verb: "GET" | "DELETE";
  target?: string;
  swap?: string;
}

interface Props {
  id: string;
  items: MenuItem[];
}

const { id, items } = Astro.props;

const toggleButtonId = `toggle-button-${id}`;
const listId = `list-${id}`;
---

<script define:vars={{ toggleButtonId, listId }}>
  setTimeout(() => {
    const toggleButton = document.getElementById(toggleButtonId);
    const list = document.getElementById(listId);

    if (!toggleButton) {
      throw new Error(
        `Could not find toggle button with id: ${toggleButtonId}`,
      );
    }
    if (!list) {
      throw new Error(`Could not find list with id: ${listId}`);
    }

    toggleButton.addEventListener("click", () => {
      list.classList.toggle("open");
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && list.classList.contains("open")) {
        list.classList.remove("open");
      }
    });

    document.addEventListener("click", (event) => {
      if (
        !list.contains(event.target) &&
        !toggleButton.contains(event.target) &&
        list.classList.contains("open")
      ) {
        list.classList.remove("open");
      }
    });

    list.querySelectorAll("button").forEach((button) => {
      button.addEventListener("click", () => {
        list.classList.remove("open");
      });
    });
  }, 0);
</script>

<div>
  <button id={toggleButtonId} class="toggle-button"><span>...</span></button>

  <ul id={listId} class="list">
    {
      items.map((item, index) => {
        return (
          <li>
            {index !== 0 && <hr />}
            <button
              hx-get={item.verb === "GET" ? item.url : undefined}
              hx-delete={item.verb === "DELETE" ? item.url : undefined}
              hx-target={item.target}
              hx-swap={item.swap}
            >
              {item.label}
            </button>
          </li>
        );
      })
    }
  </ul>
</div>

<style>
  hr {
    margin: 0;
  }

  .toggle-button {
    background-color: transparent;
    border: none;
    color: var(--text);
    font-size: 1.5rem;
  }

  .toggle-button span {
    position: relative;
    top: -12px;
    font-size: 2.5rem;
  }

  .list {
    display: none;
  }

  .list.open {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: var(--background);
    list-style: none;
    position: absolute;
    margin-left: -5rem;
    z-index: 1;
    border-radius: 0.5rem;
    box-shadow: var(--shadow);
    padding: 0;
  }

  .list.open button {
    width: 100%;
    padding: 0.5rem;
    margin: 0;
    background-color: transparent;
    border: none;
    color: var(--text);
  }

  .list.open li {
    width: 100%;
    min-width: 125px;
    border-radius: 0.5rem;
  }

  .list.open li:hover {
    background-color: var(--section-background);
  }
</style>
