---
import type { Folder, NotificationPreference } from "@/services/types";
import Modal from "@/components/Modal.astro";

interface Props {
  folder: Folder;
  notificationPreference: NotificationPreference;
}

const { folder, notificationPreference } = Astro.props;

const modalId = "notification-preference-modal";
const closeButtonId = "notification-preference-close-button";
---

<script define:vars={{ notificationPreference, modalId, closeButtonId }}>
  document.body.addEventListener("htmx:configRequest", function (event) {
    const date = document.getElementById("date-picker").value;
    const time = document.getElementById("time-picker").value;
    const localDate = new Date(`${date}T${time}`);

    event.detail.parameters["localDate"] = localDate;
  });

  const date = notificationPreference.date;
  const time = notificationPreference.time;

  const utcDate = new Date(`${date}T${time}Z`);
  const month = `${utcDate.getMonth() + 1 < 10 ? "0" : ""}${
    utcDate.getMonth() + 1
  }`;
  const day = `${utcDate.getDate() < 10 ? "0" : ""}${utcDate.getDate()}`;

  const localDate = `${utcDate.getFullYear()}-${month}-${day}`;

  const hours = `${utcDate.getHours() < 10 ? "0" : ""}${utcDate.getHours()}`;
  const minutes = `${
    utcDate.getMinutes() < 10 ? "0" : ""
  }${utcDate.getMinutes()}`;
  const localTime = `${hours}:${minutes}`;

  const datePicker = document.getElementById("date-picker");
  datePicker.value = localDate;

  const timePicker = document.getElementById("time-picker");
  timePicker.value = localTime;
</script>

<Modal modalId={modalId} closeButtonId={closeButtonId}>
  <form
    class="notification-preference-form"
    hx-post={`/folder/${folder.id}/preference`}
    hx-target="this"
    hx-swap="beforebegin"
  >
    <input
      id="date-picker"
      type="date"
      name="date"
      aria-label="Date"
      required
    />

    <input id="time-picker" type="time" name="time" aria-label="Time" />

    <fieldset>
      <legend>Repeat</legend>

      <div>
        <input
          id="sunday-checkbox"
          type="checkbox"
          name="repeat"
          value="sunday"
          checked={!!notificationPreference.repeat.sunday}
        />
        <label for="sunday-checkbox">Sunday</label>
      </div>

      <div>
        <input
          id="monday-checkbox"
          type="checkbox"
          name="repeat"
          value="monday"
          checked={!!notificationPreference.repeat.monday}
        />
        <label for="monday-checkbox">Monday</label>
      </div>

      <div>
        <input
          id="tuesday-checkbox"
          type="checkbox"
          name="repeat"
          value="tuesday"
          checked={!!notificationPreference.repeat.tuesday}
        />
        <label for="tuesday-checkbox">Tuesday</label>
      </div>

      <div>
        <input
          id="wednesday-checkbox"
          type="checkbox"
          name="repeat"
          value="wednesday"
          checked={!!notificationPreference.repeat.wednesday}
        />
        <label for="wednesday-checkbox">Wednesday</label>
      </div>

      <div>
        <input
          id="thursday-checkbox"
          type="checkbox"
          name="repeat"
          value="thursday"
          checked={!!notificationPreference.repeat.thursday}
        />
        <label for="thursday-checkbox">Thursday</label>
      </div>

      <div>
        <input
          id="friday-checkbox"
          type="checkbox"
          name="repeat"
          value="friday"
          checked={!!notificationPreference.repeat.friday}
        />
        <label for="friday-checkbox">Friday</label>
      </div>

      <div>
        <input
          id="saturday-checkbox"
          type="checkbox"
          name="repeat"
          value="saturday"
          checked={!!notificationPreference.repeat.saturday}
        />
        <label for="saturday-checkbox">Saturday</label>
      </div>
    </fieldset>

    <button class="primary-button" type="submit">Update</button>
  </form>
</Modal>

<style>
  .notification-preference-form {
    display: flex;
    flex-direction: column;
    width: 400px;
    margin: 0 auto;
  }

  .notification-preference-form label {
    margin-bottom: 0.5rem;
    margin-left: 0.5rem;
  }

  .notification-preference-form label:hover,
  .notification-preference-form input:hover {
    cursor: pointer;
  }

  .notification-preference-form input {
    margin-bottom: 1rem;
  }

  .notification-preference-form fieldset {
    padding: 1rem;
    font-size: large;
  }

  .notification-preference-form fieldset label {
    margin-right: 1rem;
  }

  .notification-preference-form button {
    margin-top: 1rem;
    padding: 0.5rem;
    font-size: large;
  }

  .notification-preference-form input[type="checkbox"] {
    transform: scale(1.5);
  }

  .notification-preference-form input[type="checkbox"]:checked + label {
    font-weight: bold;
  }

  .notification-preference-form input[type="date"],
  .notification-preference-form input[type="time"] {
    height: 45px;
    width: 50%;
    margin: 0.5rem auto;
    font-size: x-large;
  }

  /* Mobile */
  @media (max-width: 37.5em) {
    .notification-preference-form {
      width: 100%;
    }

    .notification-preference-form input[type="date"],
    .notification-preference-form input[type="time"] {
      width: 100%;
    }
  }
</style>
