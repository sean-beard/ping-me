generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                        @id @default(autoincrement())
  username                 String                     @unique
  notificationsEnabled     Boolean                    @default(false)
  email                    String?
  firstName                String?
  lastName                 String?
  files                    File[]
  folders                  Folder[]
  reminders                Reminder[]
  notifications            Notification[]
  NotificationSubscription NotificationSubscription[]
  password                 Password?
  // Session   Session[]
}

model Password {
  hash String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

// model Session {
//   id             String   @id @default(uuid())
//   createdAt      DateTime @default(now())
//   user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId         Int
//   expirationDate DateTime
// }

model File {
  id      Int      @id @default(autoincrement())
  name    String
  html    String
  folders Folder[]
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
}

model Folder {
  id         Int        @id @default(autoincrement())
  name       String
  isArchived Boolean    @default(false)
  files      File[]
  User       User       @relation(fields: [userId], references: [id])
  userId     Int
  reminders  Reminder[]
}

model Reminder {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  folder        Folder         @relation(fields: [folderId], references: [id], onDelete: Cascade)
  userId        Int
  folderId      Int
  dueDate       DateTime
  schedule      String?
  // not used yet
  endDate       DateTime?
  isCompleted   Boolean        @default(false)
  notifications Notification[]

  @@unique([userId, folderId])
}

model Notification {
  id                   Int                      @id @default(autoincrement())
  user                 User                     @relation(fields: [userId], references: [id])
  reminder             Reminder                 @relation(fields: [reminderId], references: [id])
  subscription         NotificationSubscription @relation(fields: [subscriptionId], references: [id])
  reminderId           Int
  userId               Int
  subscriptionId       Int
  isNotified           Boolean                  @default(false)
  notificationDatetime DateTime                 @default(now())
}

model NotificationSubscription {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  endpoint       String
  p256dh         String
  auth           String
  origin         String
  // not used yet
  expirationTime DateTime?
  userId         Int
  notifications  Notification[]

  @@unique([userId, endpoint])
}
